[{"id":0,"href":"/docs/web/starthere/","title":"Start Here","section":"Web","content":" Basic Website Setup # Below is a quick setup guide for building a website with Next.js and Vercel — the perfect infrastructure to add V0 code to!\nProject Setup # First, check if you have Node installed. If not, download Node:\nnode -v Next, create a new web project. The following command includes presets that integrate well with V0 code:\nnpx create-next-app@latest project-name --typescript --eslint --tailwind --app --src-dir --import-alias \u0026#34;@/*\u0026#34; Say no to Turbopack.\nNavigate to the project-name directory:\ncd project-name Recomended Directory Structure # my-app/ ├── app/ # Pages and API routes ├── components/ # Reusable UI components ├── lib/ # Utilities and configurations ├── hooks/ # Custom React hooks ├── types/ # TypeScript definitions └── public/ # Static assets Go Build!! # Go to V0, sign up, and prompt it to build a website of your choosing.\nTry this:\nClick on the Add to Codebase icon, copy the command, and run it in your project root directory (project-name). Install the packages and answer the following questions: Components.js file: Yes Style: Default Color: Neutral CSS Variables: Yes However, there is currently an unresolved bug with the tech that fetches V0 code. If it doesn\u0026rsquo;t work, here is a workaround:\nManually download the files via zip and copy them over. Only move files that have been updated or added such as the components, hooks, lib and style folders. To test your website locally:\nnpm run dev Paste the local host URL printed in your terminal into your browser to test your website.\nIf you get errors, check if you need to download any extra dependencies and make use of your favorite AI chatbot to resolve them.\nPushing to Git # Go to the directory where you want to store all the code for your CS210 project.\nPush your changes to GitHub for the first time:\ngit clone https://github.com/your-username/your-repo.git cd your-repo git add . git commit -m \u0026#34;Add project files\u0026#34; git push Deploying on Vercel # Go to Vercel Import your Git repository Add any environment variables Deploy Ok!! You are now ready to go build the most amazing website of your dreams! Remember to leverage AI tools and dive into documentation when necessary.\nDocumentation # Want to learn Next.js? The following resources are your best bet:\nNext.js Documentation - Learn about Next.js features and APIs. Learn Next.js - An interactive Next.js tutorial. Vercel Templates - Boilerplate code that can be a great starting point or inspiration for a project or component. "},{"id":1,"href":"/docs/ml/basic/","title":"Basic ML","section":"ML Engineering","content":" Basic ML # Below are some snippets for common ML use cases such as NLP \u0026ndash; namely, LLMs \u0026ndash; computer vision, and even standard statistical ML.\nLarge Language Models (LLMs) # For initial iteration, using LLM APIs is probably the best way to go. There are several models out there, each with their own strengths. Below is an example using the OpenAI API to make a call to a language model:\nfrom openai import OpenAI client = OpenAI() completion = client.chat.completions.create( model=\u0026#34;gpt-4o-mini\u0026#34;, messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;You are a helpful assistant.\u0026#34;}, { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Write a haiku about recursion in programming.\u0026#34; } ] ) print(completion.choices[0].message) As you continue to iterate, you may want to leverage the power of open-source models. For this, Hugging Face \u0026ndash; in particular, the SentenceTransformers module \u0026ndash; will be your best friend. Just specify your language model and you\u0026rsquo;ll be good to go:\nfrom sentence_transformers import SentenceTransformer model = SentenceTransformer(\u0026#39;paraphrase-MiniLM-L6-v2\u0026#39;) # Sentences we want to encode. Example: sentence = [\u0026#39;This framework generates embeddings for each input sentence\u0026#39;] # Sentences are encoded by calling model.encode() embedding = model.encode(sentence) Of course, utilizing an open-source model will also mean figuring out how to serve the model. There are a plethora of tools for this, including Modal, Baseten, Together AI, and many others.\nComputer Vision # Similar to LLMs, there are several Vision APIs available that can be used for quick experimentation. All of the larger cloud platforms have existing offerings \u0026ndash; namely GCP and Azure \u0026ndash; but it\u0026rsquo;s also important to note that many of the SOTA models are already multimodal. For instance, GPT-4V already has strong vision capabilities:\nfrom openai import OpenAI client = OpenAI() response = client.chat.completions.create( model=\u0026#34;gpt-4o-mini\u0026#34;, messages=[ { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: [ {\u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;What\u0026#39;s in this image?\u0026#34;}, { \u0026#34;type\u0026#34;: \u0026#34;image_url\u0026#34;, \u0026#34;image_url\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\u0026#34;, }, }, ], } ], max_tokens=300, ) print(response.choices[0]) For using custom models, torchvision \u0026ndash; and PyTorch more broadly \u0026ndash; are quite helpful. These packages allow us to both build our own models from scratch as well as use existing large pre-trained models. we can both An often common use case is to take a pre-trained image classification or segmentation model and further finetuning it for a specific task. This is also known as transfer learning, and there are several tutorials out there for the task.\nStatistical ML # Finally, for simple problems, statistical techniques may be sufficient. sklearn is often what\u0026rsquo;s used in industry for these tasks, and it can support tasks ranging from nearest neighbors clustering to gradient boosting. Here\u0026rsquo;s an example of using sklearn for linear regression:\nfrom sklearn.linear_model import LinearRegression import numpy as np # Create some sample data X = np.array([[1], [2], [3], [4], [5]]) # Features y = np.array([2, 4, 5, 4, 5]) # Target values # Create and fit the model model = LinearRegression() model.fit(X, y) # Make predictions predictions = model.predict(X) # Get model coefficients and intercept print(f\u0026#34;Slope: {model.coef_[0]:.2f}\u0026#34;) print(f\u0026#34;Intercept: {model.intercept_:.2f}\u0026#34;) # Calculate R-squared score r_squared = model.score(X, y) print(f\u0026#34;R-squared: {r_squared:.2f}\u0026#34;) "},{"id":2,"href":"/docs/class-resources/","title":"Class Resources","section":"Docs","content":" Class Resources # Below are some general class resources, ranging from deployment credits to general tools of the trade.\nVercel Credits # Students can create a Vercel Hobby account as soon as the class starts - Hobby accounts are always free If they\u0026rsquo;d like to explore Pro features, we\u0026rsquo;ve set up \u0026ldquo;Stanford CS\u0026rdquo; as a category in the Vercel Credits for Startups application page. Each team will receive $1,200 in credits. For \u0026ldquo;Proof of Partnership\u0026rdquo;, they should upload a screenshot of the syllabus / an e-mail from Jay about the course. A 14-day Pro Trial begins (they can email josh.oynick@vercel.com with any issues). At the end of the trial, if the teams choose to remain on Pro and add credit card info, the credits will begin to draw down. If teams add payment info, they are strongly encouraged to set hard spending limits right away (documentation). Tools of the Trade # Documentation # Github Wiki Here are some examples Project Management # Github issues, milestones, labels, comments Here is an example Real-time Team Communication # Slack, Messenger Discovery, Concepting Phase # Hand draw, Miro, Figma, GSlides Build Phase # Github Code (Pull request methodology) Github issues (code focused) Leverage Copilot, chatGPT, Bard as is useful GitHub Resources # Make sure your git activity is attributed to you Github Cheat Sheet - Page 1 Github Cheat Sheet - Page 2 How to make a Github pull request Miscellany Resources # Messaging Activation Matrix Beginner\u0026rsquo;s resources for Building Web and mobile apps CS210 Recommended Reads for Aspiring Program Managers/Product Leaders Contract of Deliverables Template Product Requirements Document (PRD) An incomplete list of ethics questions to consider Team Budget Guidelines Grading Rubric Make an animated gif from screen shots Digital sticky note option "},{"id":3,"href":"/docs/ml/extending-llms/","title":"Extending LLMs","section":"ML Engineering","content":" Extending LLMs # Below are some ways to go beyond just LLMs and use your custom data. These include methods such as finetuning, RAG, and even searching over tabular data.\nFinetuning # RAG # Tabular Data # "},{"id":4,"href":"/docs/ml/general-advice/","title":"General Advice","section":"ML Engineering","content":" General Advice # Below are some general tips, aggregated from industry experts and 210 alums.\nBuy first, not Build. # For initial functional prototyping and for most of the former part of your application\u0026rsquo;s lifecycle, lean on existing APIs to do a lot of the heavy lifting. These models are already quite powerful and are able to handle almost all of the requests you send it. If certain users or design partners necessitate even more advanced functionality, though, consider working and finetuning your own LLMs.\nWhen unsure, lean on the literature. # Oftentimes, issues with performance lie in the technical reports.\n"},{"id":5,"href":"/docs/vr/getting-started-in-vr/","title":"Getting Started in VR","section":"AR/VR","content":" Getting Started in VR # Original document by Mindy:\nLast year I did a VR project in CS210 with Unreal Engine, and thought that I would share some thoughts and tips with you guys to get you started.\nDemos # Title Link Description Oculus Demos repository https://share.oculus.com/ The definitive VR experiences and demos repository from Oculus. Elite Dangerous https://www.elitedangerous.com/ A space exploration video game with a great VR experience. Costs $45. Things to think about # what sort of approaches to games/experiences might work for your project? What are some common/different control interfaces/menus/UI that the demos use? What works better or worse? what hasn\u0026rsquo;t been done/done well? What can you bring to the table? There are also loads of other VR demos available - if you want to see if a kind of demo exists just Google it and you\u0026rsquo;ll probably turn something up. Also check out Cardboard demos on Google Play (I recommend VRSE) to see what sort of things are happening in the non-gaming/low-end space. VR best practices # Google - http://www.fastcodesign.com/3053288/3-tips-on-designing-for-vr-from-google, https://play.google.com/store/apps/details?id=com.google.vr.cardboard.apps.designlab Unreal - https://docs.unrealengine.com/latest/INT/Platforms/VR/ContentSetup/index.html Oculus - https://developer.oculus.com/documentation/intro-vr/latest/concepts/bp_intro/ Search for \u0026ldquo;VR best practices for [insert company/device/controller]\u0026rdquo; and you\u0026rsquo;ll probably unearth a ton of stuff Unreal Engine tutorials # Unreal has a really good YouTube series where a developer sits there and shows you how to make a demo. This was by far the most helpful way to get me oriented. https://www.youtube.com/playlist?list=PLZlv_N0_O1gak1_FoAJVrEGiLIploeF3F LayoutVR has good walkthrough guides You can go read the official Unreal Engine guides too Unreal has a steep learning curve if you\u0026rsquo;ve never done game dev before, so make sure you allocate a lot of time to learning it! Controllers # This is still a huge pain point in VR, and likely the bottleneck to what you can accomplish. Oculus Touch is probably your best bet if you can get your hands on it Razer Hydra/Sixense STEM or the Kinect are other good But really, try to find all your possible options. If the controller is not exactly commercially available yet, don\u0026rsquo;t be afraid to ask for a prototype. You won\u0026rsquo;t believe how willing people are to work with you once you drop the Stanford/Unreal/Facebook/Oculus name. Mindy\u0026rsquo;s team\u0026rsquo;s work from last year # https://unrealvr.wordpress.com/ I\u0026rsquo;ve also done stuff on the Cardboard and some product research on the space in general. Feel free to ask me any questions! There is a LOT of information to just absorb if you\u0026rsquo;re completely new to the space.\nFeeling a bit overwhelmed is normal, just be tenacious, ask tons of questions and keep on reading!\n"},{"id":6,"href":"/docs/web/databases/","title":"Databases","section":"Web","content":" Databases # Most modern web applications often require a database to store and manage data. This guide will lead you through setting up a database for a Next.js project, using hosted database services, and performing basic CRUD (Create, Read, Update, Delete) operations with Prisma, a popular ORM (Object Relational Mapper).\nChoosing a Database # SQL (PostgreSQL via Supabase) # Choose when you need: Data relationships, ACID compliance, complex queries Free tier available, excellent documentation Built-in row-level security and authentication NoSQL (MongoDB Atlas) # Choose when you need: Flexible schema, high write throughput, horizontal scaling Free tier available, great for prototypes Native JSON support Setup Guide for Hosted Databases # PostgreSQL via Supabase # Sign up here Create project Get connection string from: Settings -\u0026gt; Database MongoDB Atlas # Sign up here Create cluster (M0 Free tier) Get connection string from: Connect -\u0026gt; Connect your application Adding Prisma to Your Next.js Project # Prisma makes working with databases in Next.js efficient and type-safe. Follow these steps:\nInstall Prisma by running the following commands in your project:\nnpm install prisma --save-dev npm install @prisma/client Initialize Prisma\nnpx prisma init This creates a prisma/ directory with a schema.prisma file.\nUpdate the schema.prisma file by replacing the datasource block with your connection string. For example:\ndatasource db { provider = \u0026#34;postgresql\u0026#34; // Change to \u0026#34;mongodb\u0026#34; for MongoDB url = env(\u0026#34;DATABASE_URL\u0026#34;) } Add a simple model:\nmodel Post { id Int @id @default(autoincrement()) title String content String createdAt DateTime @default(now()) } Move the model to your database:\nnpx prisma migrate dev --name description_of_changes or for quick prototyping and no version control:\nnpx prisma db push This creates the Post table in your database.\nCRUD Operations in Next.js # Here’s how to perform basic CRUD operations using Prisma in API routes:\na. Create a Post # Create a new file app/api/posts/create.js:\nimport { PrismaClient } from \u0026#34;@prisma/client\u0026#34;; const prisma = new PrismaClient(); export default async function handler(req, res) { if (req.method === \u0026#34;POST\u0026#34;) { const { title, content } = req.body; const post = await prisma.post.create({ data: { title, content, }, }); res.status(200).json(post); } else { res.status(405).json({ message: \u0026#34;Method not allowed\u0026#34; }); } } b. Read Posts # Create a new file app/api/posts/index.js:\nimport { PrismaClient } from \u0026#34;@prisma/client\u0026#34;; const prisma = new PrismaClient(); export default async function handler(req, res) { if (req.method === \u0026#34;GET\u0026#34;) { const posts = await prisma.post.findMany(); res.status(200).json(posts); } else { res.status(405).json({ message: \u0026#34;Method not allowed\u0026#34; }); } } c. Update a Post # Create a new file app/api/posts/update.js:\nimport { PrismaClient } from \u0026#34;@prisma/client\u0026#34;; const prisma = new PrismaClient(); export default async function handler(req, res) { if (req.method === \u0026#34;PUT\u0026#34;) { const { id, title, content } = req.body; const post = await prisma.post.update({ where: { id: Number(id) }, data: { title, content }, }); res.status(200).json(post); } else { res.status(405).json({ message: \u0026#34;Method not allowed\u0026#34; }); } } d. Delete a Post # Create a new file app/api/posts/delete.js:\nimport { PrismaClient } from \u0026#34;@prisma/client\u0026#34;; const prisma = new PrismaClient(); export default async function handler(req, res) { if (req.method === \u0026#34;DELETE\u0026#34;) { const { id } = req.body; await prisma.post.delete({ where: { id: Number(id) }, }); res.status(200).json({ message: \u0026#34;Post deleted\u0026#34; }); } else { res.status(405).json({ message: \u0026#34;Method not allowed\u0026#34; }); } } You have now created RESTful API Endpoints for your database operations!\nEnvironment Variables # Store your database connection string securely in a .env file:\nDATABASE_URL=your-database-connection-string Ensure .env is added to your .gitignore to prevent it from being committed.\nPerformance Tips # Add indexes for frequently queried fields Use select to limit returned fields Consider caching for read-heavy operations "},{"id":7,"href":"/docs/web/frontendessentials/","title":"Frontendessentials","section":"Web","content":" Frontend Development Guide for Next.js # Component Architecture # Understanding Components # Components are the building blocks of your React application. They should be:\nSmall and focused on a single responsibility Reusable across different parts of your application Well-typed with TypeScript interfaces Easy to test and maintain Here\u0026rsquo;s an example of a well-structured component:\n// components/ui/Card.tsx interface CardProps { title: string children: React.ReactNode className?: string } export function Card({ title, children, className = \u0026#39;\u0026#39; }: CardProps) { return ( \u0026lt;div className={`rounded-lg shadow-md p-4 ${className}`}\u0026gt; \u0026lt;h2 className=\u0026#34;text-xl font-bold mb-2\u0026#34;\u0026gt;{title}\u0026lt;/h2\u0026gt; \u0026lt;div\u0026gt;{children}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } This Card component demonstrates several best practices:\nClear interface definition Props with TypeScript types Default values for optional props Composition using children prop Flexible styling with className prop Component Organization # Organize your components into categories:\nui/: Basic building blocks (buttons, cards, inputs) features/: Business-specific components (UserProfile, OrderForm) layout/: Page structure components (Header, Footer, Sidebar) Custom Hooks # Custom hooks allow you to extract and reuse stateful logic across components. They should:\nHandle common patterns like data fetching, form state, or animations Follow the \u0026ldquo;use\u0026rdquo; naming convention Be composable with other hooks Handle loading and error states Here\u0026rsquo;s an essential data fetching hook:\n// hooks/usePosts.ts import { useState, useEffect } from \u0026#39;react\u0026#39; import type { Post } from \u0026#39;@/types\u0026#39; export function usePosts() { const [posts, setPosts] = useState\u0026lt;Post[]\u0026gt;([]) const [loading, setLoading] = useState(true) const [error, setError] = useState\u0026lt;string | null\u0026gt;(null) useEffect(() =\u0026gt; { const fetchPosts = async () =\u0026gt; { try { setLoading(true) const res = await fetch(\u0026#39;/api/posts\u0026#39;) if (!res.ok) throw new Error(\u0026#39;Failed to fetch posts\u0026#39;) const data = await res.json() setPosts(data) } catch (err) { setError(err instanceof Error ? err.message : \u0026#39;An error occurred\u0026#39;) } finally { setLoading(false) } } fetchPosts() }, []) return { posts, loading, error } } This hook demonstrates:\nProper state management for async operations Error handling TypeScript type safety Loading state handling Page Structure and Routing # Next.js 13+ uses the App Router, which provides:\nFile-based routing Nested layouts Server and Client Components Loading and error states Here\u0026rsquo;s a basic page structure:\n// app/posts/page.tsx import { Suspense } from \u0026#39;react\u0026#39; import { PostList } from \u0026#39;@/components/features/PostList\u0026#39; import { LoadingSpinner } from \u0026#39;@/components/ui/LoadingSpinner\u0026#39; export default function PostsPage() { return ( \u0026lt;div className=\u0026#34;container mx-auto px-4 py-8\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-3xl font-bold mb-6\u0026#34;\u0026gt;Posts\u0026lt;/h1\u0026gt; \u0026lt;Suspense fallback={\u0026lt;LoadingSpinner /\u0026gt;}\u0026gt; \u0026lt;PostList /\u0026gt; \u0026lt;/Suspense\u0026gt; \u0026lt;/div\u0026gt; ) } Key concepts to remember:\nUse Suspense for loading states Keep pages simple and focused on layout Move complex logic to components Use proper semantic HTML structure State Management # Choose the right state management approach based on your needs:\nLocal State (useState):\nFor component-specific state When state doesn\u0026rsquo;t need to be shared Context API:\nFor state shared across many components When prop drilling becomes an issue Theme, user preferences, authentication state Here\u0026rsquo;s a practical theme context example:\n// contexts/ThemeContext.tsx import { createContext, useContext, useState } from \u0026#39;react\u0026#39; interface ThemeContextType { theme: \u0026#39;light\u0026#39; | \u0026#39;dark\u0026#39; toggleTheme: () =\u0026gt; void } const ThemeContext = createContext\u0026lt;ThemeContextType | undefined\u0026gt;(undefined) export function ThemeProvider({ children }: { children: React.ReactNode }) { const [theme, setTheme] = useState\u0026lt;\u0026#39;light\u0026#39; | \u0026#39;dark\u0026#39;\u0026gt;(\u0026#39;light\u0026#39;) const toggleTheme = () =\u0026gt; setTheme(prev =\u0026gt; prev === \u0026#39;light\u0026#39; ? \u0026#39;dark\u0026#39; : \u0026#39;light\u0026#39;) return ( \u0026lt;ThemeContext.Provider value={{ theme, toggleTheme }}\u0026gt; {children} \u0026lt;/ThemeContext.Provider\u0026gt; ) } Forms and User Input # Forms are a crucial part of web applications. Important considerations:\nInput validation Error handling Accessibility User feedback Type safety Use a custom form hook for consistent form handling:\n// hooks/useForm.ts interface UseFormOptions\u0026lt;T\u0026gt; { initialValues: T onSubmit: (values: T) =\u0026gt; Promise\u0026lt;void\u0026gt; validate?: (values: T) =\u0026gt; Partial\u0026lt;Record\u0026lt;keyof T, string\u0026gt;\u0026gt; } export function useForm\u0026lt;T extends Record\u0026lt;string, any\u0026gt;\u0026gt;({ initialValues, onSubmit, validate }: UseFormOptions\u0026lt;T\u0026gt;) { const [values, setValues] = useState\u0026lt;T\u0026gt;(initialValues) const [errors, setErrors] = useState\u0026lt;Partial\u0026lt;Record\u0026lt;keyof T, string\u0026gt;\u0026gt;\u0026gt;({}) const [submitting, setSubmitting] = useState(false) // ... form handling logic return { values, errors, submitting, handleChange, handleSubmit } } Best Practices # Component Design:\nKeep components focused and small Use TypeScript interfaces for props Handle loading and error states Make components reusable Performance:\nUse proper keys in lists Avoid unnecessary re-renders Implement proper loading states Use Next.js Image component TypeScript:\nDefine interfaces for all props Use strict mode Avoid \u0026lsquo;any\u0026rsquo; type Leverage type inference State Management:\nKeep state close to where it\u0026rsquo;s used Use context sparingly Consider server components Handle loading/error states Styling:\nUse Tailwind CSS consistently Create reusable utility classes Maintain responsive design Follow accessibility guidelines Common Pitfalls to Avoid # Over-engineering\nDon\u0026rsquo;t add complexity before it\u0026rsquo;s needed Start simple and refactor as needed Poor State Management\nAvoid prop drilling Don\u0026rsquo;t put everything in global state Use appropriate state solutions Incomplete Error Handling\nAlways handle loading states Provide user feedback Handle edge cases TypeScript Misuse\nDon\u0026rsquo;t overuse \u0026lsquo;any\u0026rsquo; Don\u0026rsquo;t ignore TypeScript errors Keep types up to date "}]