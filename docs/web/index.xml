<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on CS 210 Build Guide</title>
    <link>https://cs210.github.io/docs/web/</link>
    <description>Recent content in Web on CS 210 Build Guide</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jan 2025 10:55:07 -0800</lastBuildDate>
    <atom:link href="https://cs210.github.io/docs/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Website Setup</title>
      <link>https://cs210.github.io/docs/web/basic-website-setup/</link>
      <pubDate>Sat, 25 Jan 2025 10:55:07 -0800</pubDate>
      <guid>https://cs210.github.io/docs/web/basic-website-setup/</guid>
      <description>&lt;h1 id=&#34;basic-website-setup&#34;&gt;Basic Website Setup&lt;/h1&gt;&#xA;&lt;p&gt;Below is a quick setup guide for building a website with Next.js and Vercel â€” the perfect infrastructure to add V0 code to!&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;project-setup&#34;&gt;Project Setup&lt;/h2&gt;&#xA;&lt;p&gt;First, check if you have Node installed. If not, download &lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create a new web project. The following command includes presets that integrate well with V0 code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npx create-next-app@latest project-name --typescript --eslint --tailwind --app --src-dir --import-alias &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@/*&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Say no to Turbopack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frontend Essentials</title>
      <link>https://cs210.github.io/docs/web/frontend-essentials/</link>
      <pubDate>Sat, 25 Jan 2025 10:55:07 -0800</pubDate>
      <guid>https://cs210.github.io/docs/web/frontend-essentials/</guid>
      <description>&lt;h1 id=&#34;frontend-development-guide-for-nextjs&#34;&gt;Frontend Development Guide for Next.js&lt;/h1&gt;&#xA;&lt;h2 id=&#34;component-architecture&#34;&gt;Component Architecture&lt;/h2&gt;&#xA;&lt;h3 id=&#34;understanding-components&#34;&gt;Understanding Components&lt;/h3&gt;&#xA;&lt;p&gt;Components are the building blocks of your React application. They should be:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Small and focused on a single responsibility&lt;/li&gt;&#xA;&lt;li&gt;Reusable across different parts of your application&lt;/li&gt;&#xA;&lt;li&gt;Easy to test and maintain&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s an example of a well-structured component:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// components/ui/Card.tsx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Define the shape of props(parameters) that this component accepts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CardProps&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;// Required: The card&amp;#39;s title&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;React.ReactNode&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Required: The content inside the card&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;className?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Optional: Additional CSS classes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Card component that renders a styled container with a title and content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Card&lt;/span&gt;({ &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Default to empty string if no className provided&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CardProps&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Main container with base styles and optional custom classes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      rounded-lg    /* Rounded corners */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      shadow-md    /* Subtle shadow for depth */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      p-4         /* Padding on all sides */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /* Custom classes passed as prop */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    `&lt;/span&gt;}&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {&lt;span style=&#34;color:#75715e&#34;&gt;/* Title section with consistent styling */&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-xl font-bold mb-2&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {&lt;span style=&#34;color:#75715e&#34;&gt;/* Content section that renders the children */&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This Card component demonstrates several best practices:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Databases</title>
      <link>https://cs210.github.io/docs/web/databases/</link>
      <pubDate>Sat, 25 Jan 2025 10:55:07 -0800</pubDate>
      <guid>https://cs210.github.io/docs/web/databases/</guid>
      <description>&lt;h1 id=&#34;databases&#34;&gt;Databases&lt;/h1&gt;&#xA;&lt;p&gt;Most modern web applications often require a database to store and manage data. This guide will lead you through setting up a database for a Next.js project, using hosted database services, and performing basic CRUD (Create, Read, Update, Delete) operations with Prisma, a popular ORM (Object Relational Mapper).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;choosing-a-database&#34;&gt;Choosing a Database&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sql-postgresql-via-supabase&#34;&gt;SQL (PostgreSQL via Supabase)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Choose when you need: Data relationships, ACID compliance, complex queries&lt;/li&gt;&#xA;&lt;li&gt;Free tier available, excellent documentation&lt;/li&gt;&#xA;&lt;li&gt;Built-in row-level security and authentication&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nosql-mongodb-atlas&#34;&gt;NoSQL (MongoDB Atlas)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Choose when you need: Flexible schema, high write throughput, horizontal scaling&lt;/li&gt;&#xA;&lt;li&gt;Free tier available, great for prototypes&lt;/li&gt;&#xA;&lt;li&gt;Native JSON support&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;setup-guide-for-hosted-databases&#34;&gt;Setup Guide for Hosted Databases&lt;/h2&gt;&#xA;&lt;h3 id=&#34;postgresql-via-supabase&#34;&gt;PostgreSQL via Supabase&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Sign up &lt;a href=&#34;https://supabase.com&#34;&gt;here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Create project&lt;/li&gt;&#xA;&lt;li&gt;Get connection string from: Settings -&amp;gt; Database&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;mongodb-atlas&#34;&gt;MongoDB Atlas&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Sign up &lt;a href=&#34;https://mongodb.com/atlas&#34;&gt;here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Create cluster (M0 Free tier)&lt;/li&gt;&#xA;&lt;li&gt;Get connection string from: Connect -&amp;gt; Connect your application&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;adding-prisma-to-your-nextjs-project&#34;&gt;Adding Prisma to Your Next.js Project&lt;/h2&gt;&#xA;&lt;p&gt;Prisma makes working with databases in Next.js efficient and type-safe. Follow these steps:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analytics</title>
      <link>https://cs210.github.io/docs/web/analytics/</link>
      <pubDate>Sat, 25 Jan 2025 10:55:07 -0800</pubDate>
      <guid>https://cs210.github.io/docs/web/analytics/</guid>
      <description>&lt;h1 id=&#34;analytics&#34;&gt;Analytics&lt;/h1&gt;&#xA;&lt;p&gt;Thereâ€™s a chance that the OKRs and KPIs your team is managing can be collected/measured programmatically. Collecting information can be important, especially as you continue to achieve virality.&lt;/p&gt;&#xA;&lt;h2 id=&#34;vercel-analytics&#34;&gt;Vercel Analytics&lt;/h2&gt;&#xA;&lt;p&gt;Vercel already has a ton of analytics built into their platform, which you can check out &lt;a href=&#34;https://vercel.com/docs/analytics&#34;&gt;here&lt;/a&gt;. Even with the plan our class has, you can track metrics such as the total number of visitors and views; &lt;a href=&#34;https://vercel.com/docs/speed-insights&#34;&gt;speed and latency&lt;/a&gt;; and even build logs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
